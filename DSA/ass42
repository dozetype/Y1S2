TABLESIZE = 37
PRIME = 13
EMPTY = 0
USED = 1
DELETED = 2

class HashSlot:
    def __init__(self):
        self.key = 0
        self.indicator = EMPTY

def hash1(key):
    return key % TABLESIZE

def hash2(key):
    return (key % PRIME) + 1

def hash_insert(key, hash_table):
    # Write your code here
    i = 0
    comparison = 0
    slot = (hash1(key) + i*hash2(key)) % TABLESIZE
    while(hash_table[slot].indicator!=EMPTY and comparison<TABLESIZE):
        if(hash_table[slot].indicator == DELETED):
            while(i<TABLESIZE):
                probe = (hash1(key) + i*hash2(key)) % TABLESIZE
                if(hash_table[probe].indicator==EMPTY):
                    break
                elif (hash_table[probe].indicator == USED and 
                    hash_table[probe].key == key):
                    return -1  # Duplicate found
                elif hash_table[probe].indicator == USED:
                    comparison += 1
                i+=1
            break
        elif hash_table[slot].indicator == USED and hash_table[slot].key == key:
            return -1
        comparison += 1
        i += 1
        slot = (hash1(key) + i*hash2(key)) % TABLESIZE
        
    if(comparison>=TABLESIZE): #Full table
        return TABLESIZE
    hash_table[slot].key = key
    hash_table[slot].indicator = USED
    return comparison


def hash_delete(key, hash_table):
#write your codes here
    for i in range(TABLESIZE):
        slot = (hash1(key) + i * hash2(key)) % TABLESIZE
        if hash_table[slot].indicator == USED and hash_table[slot].key == key:
            hash_table[slot].indicator = DELETED
            return i+1   # Return the number of comparisons made (i)
        elif hash_table[slot].indicator == EMPTY:
            return -1  # Key not found, return -1
    return TABLESIZE+1  # After probing the entire table, key was not found

def print_menu():
    print("============= Hash Table ============")
    print("|1. Insert a key to the hash table  |")
    print("|2. Delete a key from the hash table|")
    print("|3. Print the hash table            |")
    print("|4. Quit                            |")
    print("=====================================")
    print("Enter selection: ", end="")
    
def main():
    import sys
    # input = sys.stdin.read
    with open('ass4input.txt', 'r') as file:
        data = file.read()
    data = list(map(int, data.split()))

    hash_table = [HashSlot() for _ in range(TABLESIZE)]
    i = 0
    print_menu()
    while i < len(data):
        opt = data[i]
        i += 1

        if opt == 1:
            print("Enter a key to be inserted:")
            if i >= len(data):
                break
            key = data[i]
            i += 1
            comparison = hash_insert(key, hash_table)
            if comparison < 0:
                print("Duplicate key")
            elif comparison < TABLESIZE:
                print(f"Insert: {key} Key Comparisons: {comparison}")
            else:
                print(f"Key Comparisons: {comparison}. Table is full.")
            print("Enter selection: ", end="")
        elif opt == 2:
            print("Enter a key to be deleted:")
            if i >= len(data):
                break
            key = data[i]
            i += 1
            comparison = hash_delete(key, hash_table)
            if comparison < 0:
                print(f"{key} does not exist.")
            elif comparison <= TABLESIZE:
                print(f"Delete: {key} Key Comparisons: {comparison}")
            else:
                print("Error")
            print("Enter selection: ", end="")
        elif opt == 3:
            for j in range(TABLESIZE):
                marker = '*' if hash_table[j].indicator == DELETED else ' '
                print(f"{j}: {hash_table[j].key} {marker}")
            print("Enter selection: ", end="")
        elif opt == 4:
            break
        else:
            continue

if __name__ == "__main__":
    main()